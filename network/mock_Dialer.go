// Code generated by mockery v2.42.3. DO NOT EDIT.

package network

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockDialer is an autogenerated mock type for the Dialer type
type MockDialer struct {
	mock.Mock
}

type MockDialer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDialer) EXPECT() *MockDialer_Expecter {
	return &MockDialer_Expecter{mock: &_m.Mock}
}

// Dial provides a mock function with given fields: ctx, peer, o
func (_m *MockDialer) Dial(ctx context.Context, peer Peer, o ...DialOpt) (io.ReadWriteCloser, error) {
	_va := make([]interface{}, len(o))
	for _i := range o {
		_va[_i] = o[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, peer)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Dial")
	}

	var r0 io.ReadWriteCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Peer, ...DialOpt) (io.ReadWriteCloser, error)); ok {
		return rf(ctx, peer, o...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Peer, ...DialOpt) io.ReadWriteCloser); ok {
		r0 = rf(ctx, peer, o...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadWriteCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, Peer, ...DialOpt) error); ok {
		r1 = rf(ctx, peer, o...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDialer_Dial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dial'
type MockDialer_Dial_Call struct {
	*mock.Call
}

// Dial is a helper method to define mock.On call
//   - ctx context.Context
//   - peer Peer
//   - o ...DialOpt
func (_e *MockDialer_Expecter) Dial(ctx interface{}, peer interface{}, o ...interface{}) *MockDialer_Dial_Call {
	return &MockDialer_Dial_Call{Call: _e.mock.On("Dial",
		append([]interface{}{ctx, peer}, o...)...)}
}

func (_c *MockDialer_Dial_Call) Run(run func(ctx context.Context, peer Peer, o ...DialOpt)) *MockDialer_Dial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]DialOpt, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(DialOpt)
			}
		}
		run(args[0].(context.Context), args[1].(Peer), variadicArgs...)
	})
	return _c
}

func (_c *MockDialer_Dial_Call) Return(_a0 io.ReadWriteCloser, _a1 error) *MockDialer_Dial_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDialer_Dial_Call) RunAndReturn(run func(context.Context, Peer, ...DialOpt) (io.ReadWriteCloser, error)) *MockDialer_Dial_Call {
	_c.Call.Return(run)
	return _c
}

// Scheme provides a mock function with given fields:
func (_m *MockDialer) Scheme() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Scheme")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockDialer_Scheme_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scheme'
type MockDialer_Scheme_Call struct {
	*mock.Call
}

// Scheme is a helper method to define mock.On call
func (_e *MockDialer_Expecter) Scheme() *MockDialer_Scheme_Call {
	return &MockDialer_Scheme_Call{Call: _e.mock.On("Scheme")}
}

func (_c *MockDialer_Scheme_Call) Run(run func()) *MockDialer_Scheme_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDialer_Scheme_Call) Return(_a0 string) *MockDialer_Scheme_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDialer_Scheme_Call) RunAndReturn(run func() string) *MockDialer_Scheme_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDialer creates a new instance of MockDialer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDialer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDialer {
	mock := &MockDialer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
