// Code generated by mockery v2.42.3. DO NOT EDIT.

package dndm

import (
	mock "github.com/stretchr/testify/mock"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

// MockInterest is an autogenerated mock type for the Interest type
type MockInterest struct {
	mock.Mock
}

type MockInterest_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterest) EXPECT() *MockInterest_Expecter {
	return &MockInterest_Expecter{mock: &_m.Mock}
}

// C provides a mock function with given fields:
func (_m *MockInterest) C() <-chan protoreflect.ProtoMessage {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for C")
	}

	var r0 <-chan protoreflect.ProtoMessage
	if rf, ok := ret.Get(0).(func() <-chan protoreflect.ProtoMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan protoreflect.ProtoMessage)
		}
	}

	return r0
}

// MockInterest_C_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'C'
type MockInterest_C_Call struct {
	*mock.Call
}

// C is a helper method to define mock.On call
func (_e *MockInterest_Expecter) C() *MockInterest_C_Call {
	return &MockInterest_C_Call{Call: _e.mock.On("C")}
}

func (_c *MockInterest_C_Call) Run(run func()) *MockInterest_C_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterest_C_Call) Return(_a0 <-chan protoreflect.ProtoMessage) *MockInterest_C_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterest_C_Call) RunAndReturn(run func() <-chan protoreflect.ProtoMessage) *MockInterest_C_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *MockInterest) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterest_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockInterest_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockInterest_Expecter) Close() *MockInterest_Close_Call {
	return &MockInterest_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockInterest_Close_Call) Run(run func()) *MockInterest_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterest_Close_Call) Return(_a0 error) *MockInterest_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterest_Close_Call) RunAndReturn(run func() error) *MockInterest_Close_Call {
	_c.Call.Return(run)
	return _c
}

// OnClose provides a mock function with given fields: _a0
func (_m *MockInterest) OnClose(_a0 func()) Interest {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for OnClose")
	}

	var r0 Interest
	if rf, ok := ret.Get(0).(func(func()) Interest); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Interest)
		}
	}

	return r0
}

// MockInterest_OnClose_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnClose'
type MockInterest_OnClose_Call struct {
	*mock.Call
}

// OnClose is a helper method to define mock.On call
//   - _a0 func()
func (_e *MockInterest_Expecter) OnClose(_a0 interface{}) *MockInterest_OnClose_Call {
	return &MockInterest_OnClose_Call{Call: _e.mock.On("OnClose", _a0)}
}

func (_c *MockInterest_OnClose_Call) Run(run func(_a0 func())) *MockInterest_OnClose_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *MockInterest_OnClose_Call) Return(_a0 Interest) *MockInterest_OnClose_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterest_OnClose_Call) RunAndReturn(run func(func()) Interest) *MockInterest_OnClose_Call {
	_c.Call.Return(run)
	return _c
}

// Route provides a mock function with given fields:
func (_m *MockInterest) Route() Route {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Route")
	}

	var r0 Route
	if rf, ok := ret.Get(0).(func() Route); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(Route)
	}

	return r0
}

// MockInterest_Route_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Route'
type MockInterest_Route_Call struct {
	*mock.Call
}

// Route is a helper method to define mock.On call
func (_e *MockInterest_Expecter) Route() *MockInterest_Route_Call {
	return &MockInterest_Route_Call{Call: _e.mock.On("Route")}
}

func (_c *MockInterest_Route_Call) Run(run func()) *MockInterest_Route_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterest_Route_Call) Return(_a0 Route) *MockInterest_Route_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterest_Route_Call) RunAndReturn(run func() Route) *MockInterest_Route_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInterest creates a new instance of MockInterest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterest(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterest {
	mock := &MockInterest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
