// Code generated by MockGen. DO NOT EDIT.
// Source: network/network.go
//
// Generated by this command:
//
//	mockgen -source=network/network.go -package testutil -destination=testutil/network_mocks.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	io "io"
	reflect "reflect"

	dndm "github.com/itohio/dndm"
	network "github.com/itohio/dndm/network"
	core "github.com/itohio/dndm/types/core"
	gomock "go.uber.org/mock/gomock"
	proto "google.golang.org/protobuf/proto"
)

// MockConn is a mock of Conn interface.
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn.
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance.
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// AddRoute mocks base method.
func (m *MockConn) AddRoute(arg0 ...dndm.Route) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddRoute", varargs...)
}

// AddRoute indicates an expected call of AddRoute.
func (mr *MockConnMockRecorder) AddRoute(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoute", reflect.TypeOf((*MockConn)(nil).AddRoute), arg0...)
}

// Close mocks base method.
func (m *MockConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close))
}

// DelRoute mocks base method.
func (m *MockConn) DelRoute(arg0 ...dndm.Route) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DelRoute", varargs...)
}

// DelRoute indicates an expected call of DelRoute.
func (mr *MockConnMockRecorder) DelRoute(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelRoute", reflect.TypeOf((*MockConn)(nil).DelRoute), arg0...)
}

// Local mocks base method.
func (m *MockConn) Local() network.Peer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Local")
	ret0, _ := ret[0].(network.Peer)
	return ret0
}

// Local indicates an expected call of Local.
func (mr *MockConnMockRecorder) Local() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Local", reflect.TypeOf((*MockConn)(nil).Local))
}

// OnClose mocks base method.
func (m *MockConn) OnClose(arg0 func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnClose", arg0)
}

// OnClose indicates an expected call of OnClose.
func (mr *MockConnMockRecorder) OnClose(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnClose", reflect.TypeOf((*MockConn)(nil).OnClose), arg0)
}

// Read mocks base method.
func (m *MockConn) Read(ctx context.Context) (*core.Header, proto.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx)
	ret0, _ := ret[0].(*core.Header)
	ret1, _ := ret[1].(proto.Message)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Read indicates an expected call of Read.
func (mr *MockConnMockRecorder) Read(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockConn)(nil).Read), ctx)
}

// Remote mocks base method.
func (m *MockConn) Remote() network.Peer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remote")
	ret0, _ := ret[0].(network.Peer)
	return ret0
}

// Remote indicates an expected call of Remote.
func (mr *MockConnMockRecorder) Remote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remote", reflect.TypeOf((*MockConn)(nil).Remote))
}

// UpdateRemotePeer mocks base method.
func (m *MockConn) UpdateRemotePeer(arg0 network.Peer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRemotePeer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRemotePeer indicates an expected call of UpdateRemotePeer.
func (mr *MockConnMockRecorder) UpdateRemotePeer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRemotePeer", reflect.TypeOf((*MockConn)(nil).UpdateRemotePeer), arg0)
}

// Write mocks base method.
func (m *MockConn) Write(ctx context.Context, route dndm.Route, msg proto.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, route, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockConnMockRecorder) Write(ctx, route, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockConn)(nil).Write), ctx, route, msg)
}

// MockDialer is a mock of Dialer interface.
type MockDialer struct {
	ctrl     *gomock.Controller
	recorder *MockDialerMockRecorder
}

// MockDialerMockRecorder is the mock recorder for MockDialer.
type MockDialerMockRecorder struct {
	mock *MockDialer
}

// NewMockDialer creates a new mock instance.
func NewMockDialer(ctrl *gomock.Controller) *MockDialer {
	mock := &MockDialer{ctrl: ctrl}
	mock.recorder = &MockDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDialer) EXPECT() *MockDialerMockRecorder {
	return m.recorder
}

// Dial mocks base method.
func (m *MockDialer) Dial(ctx context.Context, peer network.Peer, o ...network.DialOpt) (io.ReadWriteCloser, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, peer}
	for _, a := range o {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Dial", varargs...)
	ret0, _ := ret[0].(io.ReadWriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dial indicates an expected call of Dial.
func (mr *MockDialerMockRecorder) Dial(ctx, peer any, o ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, peer}, o...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockDialer)(nil).Dial), varargs...)
}

// Scheme mocks base method.
func (m *MockDialer) Scheme() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scheme")
	ret0, _ := ret[0].(string)
	return ret0
}

// Scheme indicates an expected call of Scheme.
func (mr *MockDialerMockRecorder) Scheme() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scheme", reflect.TypeOf((*MockDialer)(nil).Scheme))
}

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// Serve mocks base method.
func (m *MockServer) Serve(ctx context.Context, onConnect func(network.Peer, io.ReadWriteCloser) error, o ...network.SrvOpt) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, onConnect}
	for _, a := range o {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Serve", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Serve indicates an expected call of Serve.
func (mr *MockServerMockRecorder) Serve(ctx, onConnect any, o ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, onConnect}, o...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockServer)(nil).Serve), varargs...)
}

// MockNode is a mock of Node interface.
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode.
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance.
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// Dial mocks base method.
func (m *MockNode) Dial(ctx context.Context, peer network.Peer, o ...network.DialOpt) (io.ReadWriteCloser, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, peer}
	for _, a := range o {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Dial", varargs...)
	ret0, _ := ret[0].(io.ReadWriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dial indicates an expected call of Dial.
func (mr *MockNodeMockRecorder) Dial(ctx, peer any, o ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, peer}, o...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockNode)(nil).Dial), varargs...)
}

// Scheme mocks base method.
func (m *MockNode) Scheme() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scheme")
	ret0, _ := ret[0].(string)
	return ret0
}

// Scheme indicates an expected call of Scheme.
func (mr *MockNodeMockRecorder) Scheme() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scheme", reflect.TypeOf((*MockNode)(nil).Scheme))
}

// Serve mocks base method.
func (m *MockNode) Serve(ctx context.Context, onConnect func(network.Peer, io.ReadWriteCloser) error, o ...network.SrvOpt) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, onConnect}
	for _, a := range o {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Serve", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Serve indicates an expected call of Serve.
func (mr *MockNodeMockRecorder) Serve(ctx, onConnect any, o ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, onConnect}, o...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockNode)(nil).Serve), varargs...)
}
