// Code generated by mockery v2.42.3. DO NOT EDIT.

package testutil

import (
	context "context"

	dndm "github.com/itohio/dndm"

	mock "github.com/stretchr/testify/mock"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

// MockInterestInternal is an autogenerated mock type for the InterestInternal type
type MockInterestInternal struct {
	mock.Mock
}

type MockInterestInternal_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterestInternal) EXPECT() *MockInterestInternal_Expecter {
	return &MockInterestInternal_Expecter{mock: &_m.Mock}
}

// C provides a mock function with given fields:
func (_m *MockInterestInternal) C() <-chan protoreflect.ProtoMessage {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for C")
	}

	var r0 <-chan protoreflect.ProtoMessage
	if rf, ok := ret.Get(0).(func() <-chan protoreflect.ProtoMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan protoreflect.ProtoMessage)
		}
	}

	return r0
}

// MockInterestInternal_C_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'C'
type MockInterestInternal_C_Call struct {
	*mock.Call
}

// C is a helper method to define mock.On call
func (_e *MockInterestInternal_Expecter) C() *MockInterestInternal_C_Call {
	return &MockInterestInternal_C_Call{Call: _e.mock.On("C")}
}

func (_c *MockInterestInternal_C_Call) Run(run func()) *MockInterestInternal_C_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterestInternal_C_Call) Return(_a0 <-chan protoreflect.ProtoMessage) *MockInterestInternal_C_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterestInternal_C_Call) RunAndReturn(run func() <-chan protoreflect.ProtoMessage) *MockInterestInternal_C_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *MockInterestInternal) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterestInternal_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockInterestInternal_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockInterestInternal_Expecter) Close() *MockInterestInternal_Close_Call {
	return &MockInterestInternal_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockInterestInternal_Close_Call) Run(run func()) *MockInterestInternal_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterestInternal_Close_Call) Return(_a0 error) *MockInterestInternal_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterestInternal_Close_Call) RunAndReturn(run func() error) *MockInterestInternal_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Ctx provides a mock function with given fields:
func (_m *MockInterestInternal) Ctx() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ctx")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockInterestInternal_Ctx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ctx'
type MockInterestInternal_Ctx_Call struct {
	*mock.Call
}

// Ctx is a helper method to define mock.On call
func (_e *MockInterestInternal_Expecter) Ctx() *MockInterestInternal_Ctx_Call {
	return &MockInterestInternal_Ctx_Call{Call: _e.mock.On("Ctx")}
}

func (_c *MockInterestInternal_Ctx_Call) Run(run func()) *MockInterestInternal_Ctx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterestInternal_Ctx_Call) Return(_a0 context.Context) *MockInterestInternal_Ctx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterestInternal_Ctx_Call) RunAndReturn(run func() context.Context) *MockInterestInternal_Ctx_Call {
	_c.Call.Return(run)
	return _c
}

// MsgC provides a mock function with given fields:
func (_m *MockInterestInternal) MsgC() chan<- protoreflect.ProtoMessage {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MsgC")
	}

	var r0 chan<- protoreflect.ProtoMessage
	if rf, ok := ret.Get(0).(func() chan<- protoreflect.ProtoMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan<- protoreflect.ProtoMessage)
		}
	}

	return r0
}

// MockInterestInternal_MsgC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MsgC'
type MockInterestInternal_MsgC_Call struct {
	*mock.Call
}

// MsgC is a helper method to define mock.On call
func (_e *MockInterestInternal_Expecter) MsgC() *MockInterestInternal_MsgC_Call {
	return &MockInterestInternal_MsgC_Call{Call: _e.mock.On("MsgC")}
}

func (_c *MockInterestInternal_MsgC_Call) Run(run func()) *MockInterestInternal_MsgC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterestInternal_MsgC_Call) Return(_a0 chan<- protoreflect.ProtoMessage) *MockInterestInternal_MsgC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterestInternal_MsgC_Call) RunAndReturn(run func() chan<- protoreflect.ProtoMessage) *MockInterestInternal_MsgC_Call {
	_c.Call.Return(run)
	return _c
}

// Route provides a mock function with given fields:
func (_m *MockInterestInternal) Route() dndm.Route {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Route")
	}

	var r0 dndm.Route
	if rf, ok := ret.Get(0).(func() dndm.Route); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dndm.Route)
	}

	return r0
}

// MockInterestInternal_Route_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Route'
type MockInterestInternal_Route_Call struct {
	*mock.Call
}

// Route is a helper method to define mock.On call
func (_e *MockInterestInternal_Expecter) Route() *MockInterestInternal_Route_Call {
	return &MockInterestInternal_Route_Call{Call: _e.mock.On("Route")}
}

func (_c *MockInterestInternal_Route_Call) Run(run func()) *MockInterestInternal_Route_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterestInternal_Route_Call) Return(_a0 dndm.Route) *MockInterestInternal_Route_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterestInternal_Route_Call) RunAndReturn(run func() dndm.Route) *MockInterestInternal_Route_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInterestInternal creates a new instance of MockInterestInternal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterestInternal(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterestInternal {
	mock := &MockInterestInternal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
