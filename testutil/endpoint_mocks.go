// Code generated by MockGen. DO NOT EDIT.
// Source: endpoint.go
//
// Generated by this command:
//
//	mockgen -source=endpoint.go -package testutil -destination=testutil/endpoint_mocks.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	slog "log/slog"
	reflect "reflect"

	dndm "github.com/itohio/dndm"
	gomock "go.uber.org/mock/gomock"
)

// MockEndpoint is a mock of Endpoint interface.
type MockEndpoint struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointMockRecorder
}

// MockEndpointMockRecorder is the mock recorder for MockEndpoint.
type MockEndpointMockRecorder struct {
	mock *MockEndpoint
}

// NewMockEndpoint creates a new mock instance.
func NewMockEndpoint(ctrl *gomock.Controller) *MockEndpoint {
	mock := &MockEndpoint{ctrl: ctrl}
	mock.recorder = &MockEndpointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpoint) EXPECT() *MockEndpointMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockEndpoint) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockEndpointMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEndpoint)(nil).Close))
}

// Init mocks base method.
func (m *MockEndpoint) Init(ctx context.Context, logger *slog.Logger, add, remove func(dndm.Interest, dndm.Endpoint) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx, logger, add, remove)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockEndpointMockRecorder) Init(ctx, logger, add, remove any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockEndpoint)(nil).Init), ctx, logger, add, remove)
}

// Name mocks base method.
func (m *MockEndpoint) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockEndpointMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockEndpoint)(nil).Name))
}

// Publish mocks base method.
func (m *MockEndpoint) Publish(route dndm.Route, opt ...dndm.PubOpt) (dndm.Intent, error) {
	m.ctrl.T.Helper()
	varargs := []any{route}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(dndm.Intent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockEndpointMockRecorder) Publish(route any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{route}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockEndpoint)(nil).Publish), varargs...)
}

// Subscribe mocks base method.
func (m *MockEndpoint) Subscribe(route dndm.Route, opt ...dndm.SubOpt) (dndm.Interest, error) {
	m.ctrl.T.Helper()
	varargs := []any{route}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(dndm.Interest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockEndpointMockRecorder) Subscribe(route any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{route}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockEndpoint)(nil).Subscribe), varargs...)
}
