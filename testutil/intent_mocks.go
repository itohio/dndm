// Code generated by MockGen. DO NOT EDIT.
// Source: intent.go
//
// Generated by this command:
//
//	mockgen -source=intent.go -package testutil -destination=testutil/intent_mocks.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	dndm "github.com/itohio/dndm"
	gomock "go.uber.org/mock/gomock"
	proto "google.golang.org/protobuf/proto"
)

// MockIntent is a mock of Intent interface.
type MockIntent struct {
	ctrl     *gomock.Controller
	recorder *MockIntentMockRecorder
}

// MockIntentMockRecorder is the mock recorder for MockIntent.
type MockIntentMockRecorder struct {
	mock *MockIntent
}

// NewMockIntent creates a new mock instance.
func NewMockIntent(ctrl *gomock.Controller) *MockIntent {
	mock := &MockIntent{ctrl: ctrl}
	mock.recorder = &MockIntentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntent) EXPECT() *MockIntentMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIntent) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIntentMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIntent)(nil).Close))
}

// Interest mocks base method.
func (m *MockIntent) Interest() <-chan dndm.Route {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Interest")
	ret0, _ := ret[0].(<-chan dndm.Route)
	return ret0
}

// Interest indicates an expected call of Interest.
func (mr *MockIntentMockRecorder) Interest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Interest", reflect.TypeOf((*MockIntent)(nil).Interest))
}

// Route mocks base method.
func (m *MockIntent) Route() dndm.Route {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Route")
	ret0, _ := ret[0].(dndm.Route)
	return ret0
}

// Route indicates an expected call of Route.
func (mr *MockIntentMockRecorder) Route() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Route", reflect.TypeOf((*MockIntent)(nil).Route))
}

// Send mocks base method.
func (m *MockIntent) Send(arg0 context.Context, arg1 proto.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockIntentMockRecorder) Send(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockIntent)(nil).Send), arg0, arg1)
}

// MockIntentInternal is a mock of IntentInternal interface.
type MockIntentInternal struct {
	ctrl     *gomock.Controller
	recorder *MockIntentInternalMockRecorder
}

// MockIntentInternalMockRecorder is the mock recorder for MockIntentInternal.
type MockIntentInternalMockRecorder struct {
	mock *MockIntentInternal
}

// NewMockIntentInternal creates a new mock instance.
func NewMockIntentInternal(ctrl *gomock.Controller) *MockIntentInternal {
	mock := &MockIntentInternal{ctrl: ctrl}
	mock.recorder = &MockIntentInternalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntentInternal) EXPECT() *MockIntentInternalMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIntentInternal) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIntentInternalMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIntentInternal)(nil).Close))
}

// Ctx mocks base method.
func (m *MockIntentInternal) Ctx() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ctx")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Ctx indicates an expected call of Ctx.
func (mr *MockIntentInternalMockRecorder) Ctx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ctx", reflect.TypeOf((*MockIntentInternal)(nil).Ctx))
}

// Interest mocks base method.
func (m *MockIntentInternal) Interest() <-chan dndm.Route {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Interest")
	ret0, _ := ret[0].(<-chan dndm.Route)
	return ret0
}

// Interest indicates an expected call of Interest.
func (mr *MockIntentInternalMockRecorder) Interest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Interest", reflect.TypeOf((*MockIntentInternal)(nil).Interest))
}

// Link mocks base method.
func (m *MockIntentInternal) Link(arg0 chan<- proto.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Link", arg0)
}

// Link indicates an expected call of Link.
func (mr *MockIntentInternalMockRecorder) Link(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Link", reflect.TypeOf((*MockIntentInternal)(nil).Link), arg0)
}

// Notify mocks base method.
func (m *MockIntentInternal) Notify() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Notify")
}

// Notify indicates an expected call of Notify.
func (mr *MockIntentInternalMockRecorder) Notify() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockIntentInternal)(nil).Notify))
}

// Route mocks base method.
func (m *MockIntentInternal) Route() dndm.Route {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Route")
	ret0, _ := ret[0].(dndm.Route)
	return ret0
}

// Route indicates an expected call of Route.
func (mr *MockIntentInternalMockRecorder) Route() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Route", reflect.TypeOf((*MockIntentInternal)(nil).Route))
}

// Send mocks base method.
func (m *MockIntentInternal) Send(arg0 context.Context, arg1 proto.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockIntentInternalMockRecorder) Send(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockIntentInternal)(nil).Send), arg0, arg1)
}
