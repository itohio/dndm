// Code generated by mockery v2.42.3. DO NOT EDIT.

package dndm

import (
	context "context"
	slog "log/slog"

	mock "github.com/stretchr/testify/mock"
)

// MockEndpoint is an autogenerated mock type for the Endpoint type
type MockEndpoint struct {
	mock.Mock
}

type MockEndpoint_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEndpoint) EXPECT() *MockEndpoint_Expecter {
	return &MockEndpoint_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockEndpoint) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEndpoint_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockEndpoint_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockEndpoint_Expecter) Close() *MockEndpoint_Close_Call {
	return &MockEndpoint_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockEndpoint_Close_Call) Run(run func()) *MockEndpoint_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEndpoint_Close_Call) Return(_a0 error) *MockEndpoint_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEndpoint_Close_Call) RunAndReturn(run func() error) *MockEndpoint_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: ctx, logger, add, remove
func (_m *MockEndpoint) Init(ctx context.Context, logger *slog.Logger, add func(Interest, Endpoint) error, remove func(Interest, Endpoint) error) error {
	ret := _m.Called(ctx, logger, add, remove)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *slog.Logger, func(Interest, Endpoint) error, func(Interest, Endpoint) error) error); ok {
		r0 = rf(ctx, logger, add, remove)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEndpoint_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockEndpoint_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - ctx context.Context
//   - logger *slog.Logger
//   - add func(Interest , Endpoint) error
//   - remove func(Interest , Endpoint) error
func (_e *MockEndpoint_Expecter) Init(ctx interface{}, logger interface{}, add interface{}, remove interface{}) *MockEndpoint_Init_Call {
	return &MockEndpoint_Init_Call{Call: _e.mock.On("Init", ctx, logger, add, remove)}
}

func (_c *MockEndpoint_Init_Call) Run(run func(ctx context.Context, logger *slog.Logger, add func(Interest, Endpoint) error, remove func(Interest, Endpoint) error)) *MockEndpoint_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*slog.Logger), args[2].(func(Interest, Endpoint) error), args[3].(func(Interest, Endpoint) error))
	})
	return _c
}

func (_c *MockEndpoint_Init_Call) Return(_a0 error) *MockEndpoint_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEndpoint_Init_Call) RunAndReturn(run func(context.Context, *slog.Logger, func(Interest, Endpoint) error, func(Interest, Endpoint) error) error) *MockEndpoint_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockEndpoint) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEndpoint_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockEndpoint_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockEndpoint_Expecter) Name() *MockEndpoint_Name_Call {
	return &MockEndpoint_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockEndpoint_Name_Call) Run(run func()) *MockEndpoint_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEndpoint_Name_Call) Return(_a0 string) *MockEndpoint_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEndpoint_Name_Call) RunAndReturn(run func() string) *MockEndpoint_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: route, opt
func (_m *MockEndpoint) Publish(route Route, opt ...PubOpt) (Intent, error) {
	_va := make([]interface{}, len(opt))
	for _i := range opt {
		_va[_i] = opt[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, route)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 Intent
	var r1 error
	if rf, ok := ret.Get(0).(func(Route, ...PubOpt) (Intent, error)); ok {
		return rf(route, opt...)
	}
	if rf, ok := ret.Get(0).(func(Route, ...PubOpt) Intent); ok {
		r0 = rf(route, opt...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Intent)
		}
	}

	if rf, ok := ret.Get(1).(func(Route, ...PubOpt) error); ok {
		r1 = rf(route, opt...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEndpoint_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockEndpoint_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - route Route
//   - opt ...PubOpt
func (_e *MockEndpoint_Expecter) Publish(route interface{}, opt ...interface{}) *MockEndpoint_Publish_Call {
	return &MockEndpoint_Publish_Call{Call: _e.mock.On("Publish",
		append([]interface{}{route}, opt...)...)}
}

func (_c *MockEndpoint_Publish_Call) Run(run func(route Route, opt ...PubOpt)) *MockEndpoint_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]PubOpt, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(PubOpt)
			}
		}
		run(args[0].(Route), variadicArgs...)
	})
	return _c
}

func (_c *MockEndpoint_Publish_Call) Return(_a0 Intent, _a1 error) *MockEndpoint_Publish_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEndpoint_Publish_Call) RunAndReturn(run func(Route, ...PubOpt) (Intent, error)) *MockEndpoint_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: route, opt
func (_m *MockEndpoint) Subscribe(route Route, opt ...SubOpt) (Interest, error) {
	_va := make([]interface{}, len(opt))
	for _i := range opt {
		_va[_i] = opt[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, route)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 Interest
	var r1 error
	if rf, ok := ret.Get(0).(func(Route, ...SubOpt) (Interest, error)); ok {
		return rf(route, opt...)
	}
	if rf, ok := ret.Get(0).(func(Route, ...SubOpt) Interest); ok {
		r0 = rf(route, opt...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Interest)
		}
	}

	if rf, ok := ret.Get(1).(func(Route, ...SubOpt) error); ok {
		r1 = rf(route, opt...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEndpoint_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockEndpoint_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - route Route
//   - opt ...SubOpt
func (_e *MockEndpoint_Expecter) Subscribe(route interface{}, opt ...interface{}) *MockEndpoint_Subscribe_Call {
	return &MockEndpoint_Subscribe_Call{Call: _e.mock.On("Subscribe",
		append([]interface{}{route}, opt...)...)}
}

func (_c *MockEndpoint_Subscribe_Call) Run(run func(route Route, opt ...SubOpt)) *MockEndpoint_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]SubOpt, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(SubOpt)
			}
		}
		run(args[0].(Route), variadicArgs...)
	})
	return _c
}

func (_c *MockEndpoint_Subscribe_Call) Return(_a0 Interest, _a1 error) *MockEndpoint_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEndpoint_Subscribe_Call) RunAndReturn(run func(Route, ...SubOpt) (Interest, error)) *MockEndpoint_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEndpoint creates a new instance of MockEndpoint. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEndpoint(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEndpoint {
	mock := &MockEndpoint{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
